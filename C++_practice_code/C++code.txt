activity selection prb,,,,,,,,,,,,,

#include<stdio.h>
void printMaxActivities(int s[], int f[], int n)
{
    int i, j;

    printf ("Following activities are selected \n");

    i = 0;
    printf("%d ", i);

    for (j = 1; j < n; j++)
    {

      if (s[j] >= f[i])
      {
          printf ("%d ", j);
          i = j;
      }
    }
}

int main()
{
    int s[] =  {1, 3, 0, 5, 8, 5};
    int f[] =  {2, 4, 6, 7, 9, 9};
    int n = sizeof(s)/sizeof(s[0]);
    printMaxActivities(s, f, n);
    getchar();
    return 0;

}



bubble sort..............
#include <stdio.h>
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
void bubbleSort(int arr[], int n)
{
   int i, j;
   for (i = 0; i < n-1; i++)

       for (j = 0; j < n-i-1; j++)
           if (arr[j] > arr[j+1])
              swap(&arr[j], &arr[j+1]);
}

void printArray(int arr[], int size)
{
    for (int i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}


coin change.........
#include<stdio.h>

int count( int S[], int m, int n )
{
    int i, j, x, y;

    int table[n+1][m];

    for (i=0; i<m; i++)
        table[0][i] = 1;
    for (i = 1; i < n+1; i++)
    {
        for (j = 0; j < m; j++)
        {
            x = (i-S[j] >= 0)? table[i - S[j]][j]: 0;

            y = (j >= 1)? table[i][j-1]: 0;


            table[i][j] = x + y;
        }
    }
    return table[n][m-1];
}

int main()
{
    int arr[] = {1, 2, 3};
    int m = sizeof(arr)/sizeof(arr[0]);
    int n = 4;
    printf(" %d ", count(arr, m, n));
    return 0;
}



heapsort..................
#include <iostream>
using namespace std;
void heapify(int arr[], int n, int i)
{
    int largest = i;
    int l = 2*i + 1;
    int r = 2*i + 2;

    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}
void heapSort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i=n-1; i>=0; i--)
    {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

void printArray(int arr[], int n)
{
    for (int i=0; i<n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr)/sizeof(arr[0]);

    heapSort(arr, n);

    cout << "Sorted array is \n";
    printArray(arr, n);
}



isertion sort...........
#include <stdio.h>
#include <math.h>
void insertionSort(int arr[], int n)
{
   int i, key, j;
   for (i = 1; i < n; i++)
   {
       key = arr[i];
       j = i-1;
       while (j >= 0 && arr[j] > key)
       {
           arr[j+1] = arr[j];
           j = j-1;
       }
       arr[j+1] = key;
   }
}
void printArray(int arr[], int n)
{
   int i;
   for (i=0; i < n; i++)
       printf("%d ", arr[i]);
   printf("\n");
}
int main()
{
    int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr)/sizeof(arr[0]);

    insertionSort(arr, n);
    printArray(arr, n);

    return 0;
}



knapshack................
#include<bits/stdc++.h>
using namespace std;
#define mx 100
int dp[mx][mx],weight[mx],cost[mx],CAP,n;
int call(int pos,int w)
{
    if(pos==n+1) return 0;
    if(dp[pos][w]!=-1)return dp[pos][w];
    int profit1=0,profit2;
    if(w+weight[pos]<=CAP)
        profit1=cost[pos]+call(pos+1,w+weight[pos]);

    profit2=call(pos+1,w);
    dp[pos][w]=max(profit1,profit2);
    return dp[pos][w];
}
int main()
{
    memset(dp,-1,sizeof(dp));
    scanf("%d%d",&n,&CAP);
    for(int i=1; i<=n; i++)
    {
        scanf("%d%d",&weight[i],&cost[i]);
    }

    printf("\n%d\n",call(0,0));
}




lcs............
#include<bits/stdc++.h>
using namespace std;
char s1[100],s2[100];
int ln1,ln2,mmm[100][100];
void fun()
{
    for(int i=0;i<=ln1;i++)mmm[i][0]=0;
    for(int i=0;i<ln2;i++)mmm[0][i]=0;
    for(int i=0; i<ln1; i++)
    {
        for(int j=0; j<ln2; j++)
        {
            if(s1[i]==s2[j])
                mmm[i][j]=mmm[i-1][j-1]+1;
            else
                mmm[i][j]=max(mmm[i-1][j],mmm[i][j-1]);
                ///jodi table dekhte chas tahole nicher print ta kor
            //cout<<mmm[i][j]<<' ';
        }
       // cout<<'\n';
    }
}
int main()
{
    cin>>s1>>s2;
    ln1=strlen(s1);
    ln2=strlen(s2);
    fun();
    cout<<mmm[ln1-1][ln2-1]<<'\n';
}



lcs 1...........
#include<bits/stdc++.h>

int max(int a, int b);


int lcs( char *X, char *Y, int m, int n )
{
   int L[m+1][n+1];
   int i, j;

   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;

       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;

       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }

   return L[m][n];
}

int max(int a, int b)
{
    return (a > b)? a : b;
}

int main()
{
  char X[] = "AGGTAB";
  char Y[] = "GXTXAYB";

  int m = strlen(X);
  int n = strlen(Y);

  printf("Length of LCS is %d\n", lcs( X, Y, m, n ) );

  return 0;
}



matrix chain multipication.......................

#include<stdio.h>
#include<limits.h>

int MatrixChainOrder(int p[], int n)
{

    int m[n][n];

    int i, j, k, L, q;

    for (i = 1; i < n; i++)
        m[i][i] = 0;

    for (L=2; L<n; L++)
    {
        for (i=1; i<=n-L+1; i++)
        {
            j = i+L-1;
            m[i][j] = INT_MAX;
            for (k=i; k<=j-1; k++)
            {
                q = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
                if (q < m[i][j])
                    m[i][j] = q;
            }
        }
    }

    return m[1][n-1];
}

int main()
{
    int arr[] = {1, 2, 3, 4};
    int size = sizeof(arr)/sizeof(arr[0]);

    printf("Minimum number of multiplications is %d ",MatrixChainOrder(arr, size));

    getchar();
    return 0;
}



merge sort............
#include<stdlib.h>
#include<stdio.h>
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);

        merge(arr, l, m, r);
    }
}
void printArray(int A[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr)/sizeof(arr[0]);

    printf("Given array is \n");
    printArray(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);

    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}



power function...........
#include<stdio.h>

float power(float x, int y)
{
    float temp;
    if( y == 0)
       return 1;
    temp = power(x, y/2);
    if (y%2 == 0)
        return temp*temp;
    else
    {
        if(y > 0)
            return x*temp*temp;
        else
            return (temp*temp)/x;
    }
}

int main()
{
    float x = 2;
    int y = 3;
    printf("%f", power(x, y));
    getchar();
    return 0;
}



Quick sort............
#include<bits/stdc++.h>
using namespace std;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high- 1; j++)
    {

        if (arr[j] <= pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {

        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    quickSort(arr, 0, n-1);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}



Recursive ternary..............'
#include<bits/stdc++.h>
using namespace std;
int ternary(int arr[], int low, int high, int item)
{
    if (low <= high)
    {
        int m1=low+(high-low)/3;
        int m2=high-(high-low)/3;
        if (item == arr[m1]) return m1;
        if(item==arr[m2]) return m2;

        if (item < arr[m1]) return ternary(arr, low, m1-1, item);
        if (item <arr[m2]) return ternary(arr,m1+1,m2-1,item);
        return ternary(arr, m2+1, high, item);
    }
    return -1;
}
int main()
{
    int arr[100]= {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    cout<<ternary(arr,0,15,14);
}



Selection sort....
#include <stdio.h>
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
    for (i = 0; i < n-1; i++)
    {
        min_idx = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min_idx])
            min_idx = j;
        swap(&arr[min_idx], &arr[i]);
    }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main()
{
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    selectionSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}




weigheted activity solution.................
#include<bits/stdc++.h>
using namespace std;
int n,val[100];
struct two
{
    int fst,snd;
}tim[100];
bool srt(two i,two j)
{
    return i.snd<j.snd;
}
int fun()
{
    int mmm[100];
    for(int i=0;i<n;i++)mmm[i]=val[i];

    for(int i=1;i<n;i++)
    {
        for(int j=0;j<i;j++)
        {
            if(tim[j].snd<=tim[i].fst)
                mmm[i]=max(mmm[i],mmm[j]+val[i]);
        }
    }
    int mxx=1;
    for(int i=0;i<n;i++){mxx=max(mxx,mmm[i]);cout<<mmm[i]<<' ';}
    cout<<'\n';
    return mxx;
}
int main()
{
    cin>>n;
    for(int i=0;i<n;i++)
        cin>>tim[i].fst>>tim[i].snd>>val[i];

    sort(tim,tim+n,srt);

    cout<<fun();
}
